#!/sbin/sh
# Copyright (C) 2018 ATG Droid
# Copyright (C) 2018 PitchBlack Recovery <pitchblackrecovery@gmail.com>
# Copyright (C) 2018 Batik Recovery <hifzhan41@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License-|";
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


AB_DEVICE=false;
OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;
PX=/tmp/zip
SHRP=/sdcard/TWRP
IMG=/sdcard/TWRP/epicx/recovery.img

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD ;
    shift;
  done;
}

show_progress() { echo "progress $1 $2" > /proc/self/fd/$2; }
file_getprop() { grep "^$2" "$1" | cut -d= -f2; }
getprop() { test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1; }
abort() { ui_print "$*"; exit 1; }

mkdir -p $PX;
cd $PX;
unzip -o "$ZIP";
show_progress 0.1000000, 0;
ui_print "|---------------------------------------------|";
ui_print "|---------------------------------------------|";
ui_print "|-           ____ _   _ _____ ____           -|";
ui_print "|-          / ___| | | |  _  \  _ \          -|";
ui_print "|-          |    \ |_| |    _/  __/          -|";
ui_print "|-          \___ | | | | |\ \| |             -|";
ui_print "|-          |____/_| |_|_| \_\_|             -|";
ui_print "|-                                           -|";
ui_print "|---------------------------------------------|";
ui_print "|---------------------------------------------|";
ui_print "|                                             |";
ui_print "|              Remove Old Addons              |";
rm -rf /sdcard/TWRP/cookies/
rm -rf /sdcard/TWRP/epicx/
ui_print "|                                             |";
ui_print "|---------------------------------------------|";
ui_print "|---------------------------------------------|";
ui_print "|                                             |";
ui_print "|              Installing Addons              |";
cp -r TWRP/cookies/ /sdcard/TWRP/
cp -r TWRP/epicx/ /sdcard/TWRP/
ui_print "|                                             |";
ui_print "|---------------------------------------------|";
ui_print "|---------------------------------------------|";
ui_print "|                                             |";
ui_print "|              Flashing Recovery              |";
#AB Checking
if [[ "$AB_DEVICE" = "false" ]]; then

if [ -f "$RECOVERY" ]; then
	DD=false
	break
else
recovery_partition() {
	chk_syml() {
		RECOVERY=$(readlink -f "$RECOVERY")
		# symlink
		if [ -f "$RECOVERY" ]; then
			DD=true
		elif [ -b "$RECOVERY" ]; then
			case "$RECOVERY" in
				/dev/block/bml*|/dev/block/mtd*|/dev/block/mmc*)
					DD=false ;;
				*)
					DD=true ;;
			esac
		# otherwise we have to keep trying other locations
		else
			return 1
		fi
		ui_print "- Found recovery partition at: $RECOVERY"
	}
	# if we already have recovery block set then verify and use it
	[ "$RECOVERY" ] && chk_syml && return
	# otherwise, time to go hunting!
	if [ -f /etc/recovery.fstab ]; then
		# recovery fstab v1
		RECOVERY=$(awk '$1 == "/recovery" {print $3}' /etc/recovery.fstab)
		[ "$RECOVERY" ] && chk_syml && return
		# recovery fstab v2
		RECOVERY=$(awk '$2 == "/recovery" {print $1}' /etc/recovery.fstab)
		[ "$RECOVERY" ] && chk_syml && return
	fi
	for fstab in /fstab.*; do
		[ -f "$fstab" ] || continue
		# device fstab v2
		RECOVERY=$(awk '$2 == "/recovery" {print $1}' "$fstab")
		[ "$RECOVERY" ] && chk_syml && return
		# device fstab v1
		RECOVERY=$(awk '$1 == "/recovery" {print $3}' "$fstab")
		[ "$RECOVERY" ] && chk_syml && return
	done
	if [ -f /proc/emmc ]; then
		# emmc layout
		RECOVERY=$(awk '$4 == "\"recovery\"" {print $1}' /proc/emmc)
		[ "$RECOVERY" ] && RECOVERY=/dev/block/$(echo "$RECOVERY" | cut -f1 -d:) && chk_syml && return
	fi
	if [ -f /proc/mtd ]; then
		# mtd layout
		RECOVERY=$(awk '$4 == "\"recovery\"" {print $1}' /proc/mtd)
		[ "$RECOVERY" ] && RECOVERY=/dev/block/$(echo "$RECOVERY" | cut -f1 -d:) && chk_syml && return
	fi
	if [ -f /proc/dumchar_info ]; then
		# mtk layout
		RECOVERY=$(awk '$1 == "/recovery" {print $5}' /proc/dumchar_info)
		[ "$RECOVERY" ] && chk_syml && return
	fi
	if [ -h /dev/block/bootdevice/by-name/FOTAKernel ]; then
		#kitakami
		RECOVERY=/dev/block/bootdevice/by-name/FOTAKernel
		[ "$RECOVERY" ] && chk_syml && return
	fi
	if [ -h /dev/block/bootdevice/by-name/recovery ]; then
		#leeco
		RECOVERY=/dev/block/bootdevice/by-name/recovery
		[ "$RECOVERY" ] && chk_syml && return
	fi
	abort "Failed to Find RECOVERY Partition";
	
}
fi
fi

#COMMAND=""

AB_D() {
 ui_print "Doing Work on slot $1"
 #Dump & unpack & Cp
 tool="/tmp/batik/magiskboot"
 # dd if=/dev/block/bootdevice/by-name/$1 "of=/tmp/boot.img"
 mkdir /tmp/unpack
 dd if=/dev/block/bootdevice/by-name/$1 "of=/tmp/unpack/boot.img"
 cd /tmp/unpack
 "$tool" --unpack boot.img
 cp -f $RAM ramdisk.cpio
 "$tool" --repack boot.img
 dd if=new-boot.img of=/dev/block/bootdevice/by-name/$1
 [ $? = 0 ] || abort "Failed to flash $1 Image Please Restore the Boot.img"
 cd /tmp/batik
 rm -rf /tmp/unpack

 #[ $? = 0 ] || abort "Failed to flash $1 Image Please Restore the Boot.img"

}

#Flashing
if [ "$DD" ]; then
	if [ "$DD" == "true" ]; then
		dd if=$IMG of="$RECOVERY"
	else
		flash_image $RECOVERY $IMG
	fi
else
	if [[ "$AB_DEVICE" = "false" ]]; then
		recovery_partition;
		if [ $? = 0 ]; then
			if $DD; then
				dd if=$IMG of="$RECOVERY"
			else
				flash_image $RECOVERY $IMG
			fi
		else
			abort "Failed to write recovery image!" 43;
		fi
	else
		AB_D boot_a;
		AB_D boot_b;
	fi
fi

rm -rf $PX

ui_print "|                                             |";
ui_print "|---------------------------------------------|";
ui_print "|---------------------------------------------|";
ui_print "|                  THANK YOU                  |";
if [[ "$AB_DEVICE" = "false" ]]; then
ui_print "|           REBOOTING INTO RECOVERY           |";
else
ui_print "|           REBOOTING INTO RECOVERY           |";
fi
ui_print "|---------------------------------------------|";
ui_print "|---------------------------------------------|";
sleep 5s
show_progress 0.1000000, 90 ;
ui_print "|-----------INSTALLATION FINISHED!-----------|";
if [[ "$AB_DEVICE" = "false" ]]; then
reboot recovery;
fi
